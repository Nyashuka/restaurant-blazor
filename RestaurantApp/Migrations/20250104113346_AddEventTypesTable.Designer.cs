// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestaurantApp.Infrastructure.Persistence.DbContexts;

#nullable disable

namespace RestaurantApp.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    [Migration("20250104113346_AddEventTypesTable")]
    partial class AddEventTypesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestaurantApp.Domain.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes", (string)null);
                });

            modelBuilder.Entity("RestaurantApp.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 10,
                            Email = "chief@gmail.com",
                            FirstName = "Chief",
                            LastName = "",
                            PasswordHash = new byte[] { 167, 117, 38, 192, 92, 100, 24, 175, 182, 246, 135, 198, 82, 150, 241, 29, 165, 71, 231, 162, 79, 255, 116, 98, 126, 228, 234, 220, 141, 129, 223, 151, 123, 103, 45, 235, 23, 51, 39, 46, 121, 19, 10, 147, 243, 242, 19, 116, 123, 95, 32, 254, 216, 152, 211, 94, 128, 137, 204, 101, 215, 179, 108, 150 },
                            PasswordSalt = new byte[] { 164, 253, 247, 203, 1, 31, 22, 232, 184, 216, 33, 189, 173, 17, 121, 194, 26, 117, 116, 73, 254, 137, 116, 122, 10, 143, 203, 102, 151, 220, 144, 186, 157, 72, 178, 47, 225, 142, 168, 103, 167, 236, 87, 112, 185, 189, 40, 94, 207, 86, 65, 79, 62, 96, 237, 22, 122, 222, 10, 114, 53, 33, 131, 95, 235, 79, 218, 177, 15, 28, 55, 163, 183, 5, 59, 214, 182, 36, 246, 162, 18, 109, 203, 146, 247, 6, 2, 200, 43, 40, 238, 170, 110, 114, 208, 244, 53, 77, 40, 147, 236, 208, 84, 76, 179, 212, 27, 229, 171, 68, 107, 119, 229, 19, 144, 13, 85, 151, 147, 246, 225, 177, 1, 33, 136, 173, 224, 238 },
                            Role = 2
                        },
                        new
                        {
                            Id = 11,
                            Email = "manager@gmail.com",
                            FirstName = "Manager",
                            LastName = "",
                            PasswordHash = new byte[] { 167, 117, 38, 192, 92, 100, 24, 175, 182, 246, 135, 198, 82, 150, 241, 29, 165, 71, 231, 162, 79, 255, 116, 98, 126, 228, 234, 220, 141, 129, 223, 151, 123, 103, 45, 235, 23, 51, 39, 46, 121, 19, 10, 147, 243, 242, 19, 116, 123, 95, 32, 254, 216, 152, 211, 94, 128, 137, 204, 101, 215, 179, 108, 150 },
                            PasswordSalt = new byte[] { 164, 253, 247, 203, 1, 31, 22, 232, 184, 216, 33, 189, 173, 17, 121, 194, 26, 117, 116, 73, 254, 137, 116, 122, 10, 143, 203, 102, 151, 220, 144, 186, 157, 72, 178, 47, 225, 142, 168, 103, 167, 236, 87, 112, 185, 189, 40, 94, 207, 86, 65, 79, 62, 96, 237, 22, 122, 222, 10, 114, 53, 33, 131, 95, 235, 79, 218, 177, 15, 28, 55, 163, 183, 5, 59, 214, 182, 36, 246, 162, 18, 109, 203, 146, 247, 6, 2, 200, 43, 40, 238, 170, 110, 114, 208, 244, 53, 77, 40, 147, 236, 208, 84, 76, 179, 212, 27, 229, 171, 68, 107, 119, 229, 19, 144, 13, 85, 151, 147, 246, 225, 177, 1, 33, 136, 173, 224, 238 },
                            Role = 3
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
