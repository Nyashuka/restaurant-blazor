@inject SidebarStateService _sidebarStateService

@implements IDisposable

@inherits LayoutComponentBase

@* Required *@
<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />

<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <AuthorizeView Roles="Chief,Manager">
            <Authorized>
                <MudSpacer/>
            </Authorized>
        </AuthorizeView>
        
        <AuthorizeView Roles="User">
            <Authorized>
                @if (_sidebarStateService.IsSidebarVisible)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
                }
                <MudSpacer/>
                <MudLink Href="Orders">
                    <MudButton>
                        Orders
                    </MudButton>
                </MudLink>
            </Authorized>
        </AuthorizeView>


        <AuthorizeView>
            <NotAuthorized>
                <MudLink Href="login">
                    <MudButton>
                        Login
                    </MudButton>
                </MudLink>
                <MudLink Href="register">
                    <MudButton>
                        Register
                    </MudButton>
                </MudLink>
            </NotAuthorized>

            <Authorized>
                <MudLink Href="Logout">
                    <MudButton>
                        Logout
                    </MudButton>
                </MudLink>
            </Authorized>
        </AuthorizeView>

    </MudAppBar>
    
    <AuthorizeView Roles="User">
        <Authorized>
            @if(_sidebarStateService.IsSidebarVisible)
            {
                <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
                    <MudDrawerHeader>
                        Categories
                    </MudDrawerHeader>
                    <NavMenuCategories/>
                </MudDrawer>
            }
        </Authorized>
    </AuthorizeView>

    <AuthorizeView Roles="Chief">
        <Authorized >
            <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
                <NavMenu/>
            </MudDrawer>
        </Authorized>
    </AuthorizeView>

	<MudMainContent Class="mt-4 px-4 pb-4">
		@Body
	</MudMainContent>
</MudLayout>

@code {
	private bool _drawerOpen = true;
	private bool _isDarkMode = true;
	private MudTheme? _theme = null;

	protected override void OnInitialized()
	{
		_theme = new()
			{
				PaletteLight = _lightPalette,
				PaletteDark = _darkPalette,
				LayoutProperties = new LayoutProperties()
			};

		_sidebarStateService.OnSidebarStateChanged += UpdateView;
	}

    private void UpdateView()
    {
        StateHasChanged();
    }

	private void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	private void DarkModeToggle()
	{
		_isDarkMode = !_isDarkMode;
	}

	private readonly PaletteLight _lightPalette = new()
		{
			Black = "#110e2d",
			AppbarText = "#424242",
			AppbarBackground = "rgba(255,255,255,0.8)",
			DrawerBackground = "#ffffff",
			GrayLight = "#e8e8e8",
			GrayLighter = "#f9f9f9",
		};

	private readonly PaletteDark _darkPalette = new()
		{
			Primary = "#7e6fff",
			Surface = "#1e1e2d",
			Background = "#1a1a27",
			BackgroundGray = "#151521",
			AppbarText = "#92929f",
			AppbarBackground = "rgba(26,26,39,0.8)",
			DrawerBackground = "#1a1a27",
			ActionDefault = "#74718e",
			ActionDisabled = "#9999994d",
			ActionDisabledBackground = "#605f6d4d",
			TextPrimary = "#b2b0bf",
			TextSecondary = "#92929f",
			TextDisabled = "#ffffff33",
			DrawerIcon = "#92929f",
			DrawerText = "#92929f",
			GrayLight = "#2a2833",
			GrayLighter = "#1e1e2d",
			Info = "#4a86ff",
			Success = "#3dcb6c",
			Warning = "#ffb545",
			Error = "#ff3f5f",
			LinesDefault = "#33323e",
			TableLines = "#33323e",
			Divider = "#292838",
			OverlayLight = "#1e1e2d80",
		};

	public string DarkLightModeButtonIcon => _isDarkMode switch
	{
		true => Icons.Material.Rounded.AutoMode,
		false => Icons.Material.Outlined.DarkMode,
	};



    void IDisposable.Dispose()
    {
        _sidebarStateService.OnSidebarStateChanged -= UpdateView;
        _sidebarStateService.IsSidebarVisible = false;
    }
}
